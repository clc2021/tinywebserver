	在main函数, 定义iom前
Scheduler构造开头, Scheduler(threads, use_caller, name) = 10	1	IOManager
Scheduler构造中, Fiber::GetThis()开始
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 0协程个数=1
Scheduler构造中, Fiber::GetThis()结束
Scheduler构造中, m_rootFiber开始
Fiber::Fiber() id = 1协程个数 = 2	m_cb
Scheduler构造中, m_rootFiber结束
Scheduler构造结束
IOManager构造开头
Scheduler中, start
Thread构造开头, name = IOManager_0
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = 5012 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Thread构造结束Fiber::Fiber() main id = 2协程个数=3

Thread构造开头, name = IOManager_1
Fiber::Fiber() id = 3协程个数 = 4	m_cb
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = Thread构造结束5011	syscall(SYS_gettid) = 
Thread构造开头, name = IOManager_2
5013 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 4协程个数=5
Thread构造结束
Thread构造开头, name = IOManager_3
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = 5014 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 6协程个数=7
Fiber::Fiber() id = 7协程个数 = 8	m_cb
Thread构造结束
Thread构造开头, name = IOManager_4
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = 5016 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 8协程个数=9
Thread构造结束
Fiber::Fiber() id = 5协程个数 = 10	m_cb
Fiber::Fiber() id = 9协程个数 = 10	m_cb
Thread构造开头, name = IOManager_5
	syscall(SYS_gettid) = 5015 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 10协程个数=11
Fiber::Fiber() id = 11协程个数 = 12	m_cb
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = 5017 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Thread构造结束Fiber::Fiber() main id = 
12协程个数=13
Thread构造开头, name = IOManager_6
Fiber::Fiber() id = 13协程个数 = 14	m_cb
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = 5018 , 所以要自己构造。Thread构造结束
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 14协程个数=15

Thread构造开头, name = IOManager_7
Fiber::Fiber() id = 15协程个数 = 16	m_cb
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = Thread构造结束5019 , 所以要自己构造。
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 16协程个数=17

Thread构造开头, name = IOManager_8
Fiber::Fiber() id = 17协程个数 = 18	m_cb
Scheduler中, run开头
Scheduler中, run()开头判断, m_rootThread = 5011	syscall(SYS_gettid) = 5020 , 所以要自己构造。
Thread构造结束
IOManager构造结束
	在main函数, 定义iom后
Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
Fiber中, GetThis()t_fiber存在	在main函数, iom.schedule(test_io)前
IOManager中, tickle开头
Fiber中, GetThis()t_fiber存在IOManager中, tickle结尾
	在main函数, iom.schedule(test_io)后
IOManager析构开头
Scheduler中, stop开头
Fiber::ptr cur = Fiber::GetThis();前Scheduler中, stop()中, m_threadCount = 9

IOManager中, idle开头Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
Fiber::Fiber() id = 18协程个数 = 19	m_cb

Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
Scheduler中, stop()中, for i循环的tikcle()开始Fiber中, GetThis()t_fiber存在

IOManager中, tickle开头
IOManager中, tickle结尾
Fiber中, GetThis()t_fiber存在

Fiber::ptr cur = Fiber::GetThis();前IOManager中, idle开头
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();后


Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头
IOManager中, tickle结尾
Fiber::ptr cur = Fiber::GetThis();前Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头
IOManager中, tickle结尾
Fiber::ptr cur = Fiber::GetThis();前Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头


Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后

Fiber::ptr cur = Fiber::GetThis();后
Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
IOManager中, tickle结尾
Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头
IOManager中, tickle结尾
Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();前
	在test_io里, EINPROGRESS, 出现errno错误
	在test_io里, 注册写事件前
IOManager中, tickle结尾Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后

Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头
IOManager中, tickle结尾
Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始Fiber::ptr cur = Fiber::GetThis();前
IOManager中, tickle开头

Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, tickle结尾
Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, for i循环的tikcle()开始
IOManager中, tickle开头
IOManager中, tickle结尾
Scheduler中, stop()中, for i循环的tikcle()结束
Scheduler中, stop()中, m_rootF的tikcle()开始
IOManager中, tickle开头
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, tickle结尾
Scheduler中, stop()中, m_rootF的tikcle()结束
Scheduler中, stop()中, m_rootF->resume()开始
Fiber中, GetThis()t_fiber存在
Scheduler中, run开头
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
IOManager中, getEventContext(), 返回read或write
IOManager中, 是write事件
	在test_io里, 注册写事件后
	在test_io里, 注册读事件前
Fiber::ptr cur = Fiber::GetThis();后
Fiber::Fiber() id = 19协程个数 = 20	m_cb
Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
IOManager中, getEventContext(), 返回read或write
IOManager中, 是read事件
	在test_io里, 注册读事件后
Fiber::~Fiber() id = 18析构开头，协程个数 = 20
IOManger中, triggerEvent()开头, 会执行schedule()
IOManager中, getEventContext(), 返回read或write
IOManager中, 是read事件
IOManager中, tickle开头
IOManager中, tickle结尾
IOManager中, triggerEvent()结尾
Fiber::ptr cur = Fiber::GetThis();前有栈, 说明是子协程, dealloc stack, id = IOManger中, triggerEvent()开头, 会执行schedule()
IOManager中, getEventContext(), 返回read或write
IOManager中, 是write事件
IOManager中, triggerEvent()结尾

Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, tickle开头
Fiber::Fiber() id = 20协程个数 = 20	m_cb
Fiber中, GetThis()t_fiber存在
	写事件回调开头
	写事件回调, 连接失败
Fiber::~Fiber() id = 20析构开头，协程个数 = 20
有栈, 说明是子协程, dealloc stack, id = 20协程个数 = 19
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, tickle结尾
Fiber::Fiber() id = 21协程个数 = 20	m_cb
Fiber中, GetThis()t_fiber存在
	读事件回调开头
	在读事件回调中, 读出错, 关闭套接字 errno=111, errstr=Connection refused
Fiber中, GetThis()t_fiber不存在, 建一个
Fiber::Fiber() main id = 22协程个数=21
Fiber::~Fiber() id = 21析构开头，协程个数 = 22
有栈, 说明是子协程, dealloc stack, id = 21协程个数 = 21
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 19析构开头，协程个数 = 21
有栈, 说明是子协程, dealloc stack, id = 19协程个数 = 20
Scheduler中, stop()中, m_rootF->resume()结束
18协程个数 = 20
Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 11析构开头，协程个数 = 20
有栈, 说明是子协程, dealloc stack, id = 11协程个数 = 19
Fiber::~Fiber() id = 10析构开头，协程个数 = 19
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 17析构开头，协程个数 = 18
有栈, 说明是子协程, dealloc stack, id = 17协程个数 = 17
Fiber::~Fiber() id = 16析构开头，协程个数 = 17
Fiber::Fiber() id = 23协程个数 = 16	m_cb
Fiber中, GetThis()t_fiber存在
IOManager中, idle开头
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 23析构开头，协程个数 = 16
有栈, 说明是子协程, dealloc stack, id = 23协程个数 = 15
Fiber::~Fiber() id = 22析构开头，协程个数 = 15
Fiber::ptr cur = Fiber::GetThis();前Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();前IOManager中, name=

Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 7析构开头，协程个数 = 14
有栈, 说明是子协程, dealloc stack, id = 7协程个数 = 13
Fiber::~Fiber() id = 6析构开头，协程个数 = 13
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 3析构开头，协程个数 = 12
有栈, 说明是子协程, dealloc stack, id = 3协程个数 = 11
IOManager中, name=IOManageridle stopping exit
Fiber::ptr cur = Fiber::GetThis();前
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
Fiber::ptr cur = Fiber::GetThis();前IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾

Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 9析构开头，协程个数 = 11
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 13析构开头，协程个数 = 10
有栈, 说明是子协程, dealloc stack, id = 9协程个数 = 10
Fiber::~Fiber() id = 8析构开头，协程个数 = 10
Fiber::ptr cur = Fiber::GetThis();前
有栈, 说明是子协程, dealloc stack, id = 13协程个数 = 8
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 5析构开头，协程个数 = 8
Fiber::~Fiber() id = 12析构开头，协程个数 = 7
Fiber::~Fiber() id = 2析构开头，协程个数 = 6
有栈, 说明是子协程, dealloc stack, id = 5协程个数 = 5
Fiber::~Fiber() id = 4析构开头，协程个数 = 5
Fiber中, GetThis()t_fiber存在
Fiber::ptr cur = Fiber::GetThis();后
IOManager中, name=IOManageridle stopping exit
IOManager中, idle结尾
Scheduler中, idle fiber term
Scheduler中, run结尾
Fiber::~Fiber() id = 15析构开头，协程个数 = 4
有栈, 说明是子协程, dealloc stack, id = 15协程个数 = 3
Fiber::~Fiber() id = 14析构开头，协程个数 = 3
Scheduler中, stop结尾
IOManager析构结尾
Scheduler::~Scheduler()
Fiber::~Fiber() id = 1析构开头，协程个数 = 2
有栈, 说明是子协程, dealloc stack, id = 1协程个数 = 1
Fiber::~Fiber() id = 0析构开头，协程个数 = 1
(base) clab@~/Downloads/tinytimesy/threadpool$ 